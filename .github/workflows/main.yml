name: CI/CD Pipeline for Java App

# This section replaces the Jenkins 'parameters' block
on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: 'Application Name (shopfront, productcatalogue, etc.)'
        required: true
        default: 'shopfront'
      action:
        description: 'create or delete'
        required: true
        default: 'create'
      ImageTag:
        description: 'Docker image tag'
        required: true
        default: 'latest'
      DockerHubUser:
        description: 'Docker Hub username'
        required: true
        default: 'N/A'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Java 8 + Maven cache
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8.0.362'
          distribution: 'temurin'
          cache: maven

      # 3. Maven build + unit tests
      - name: Maven Build + Unit Tests
        working-directory: ${{ github.event.inputs.APP_NAME }}
        run: mvn -B clean verify -DskipITs=true

      # 4. Maven Integration Test (Failsafe)
      - name: Maven Integration Tests
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ github.event.inputs.APP_NAME }}
        run: mvn -B clean verify -DskipUnitTests

      # 5. SonarQube static code analysis
      - name: SonarQube Scan
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ github.event.inputs.APP_NAME }}
        run: mvn sonar:sonar -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

      # 6. Docker build
      - name: Docker Build
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ github.event.inputs.APP_NAME }}
        run: docker build -t ${{ github.event.inputs.DockerHubUser }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }} .

      # 7. Docker login
      - name: Docker Login
        if: ${{ github.event.inputs.action == 'create' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Docker push
      - name: Push Docker Image
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ github.event.inputs.APP_NAME }}
        run: docker push ${{ github.event.inputs.DockerHubUser }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }}

      # 9. Deploy to Kubernetes
      - name: Deploy to Kubernetes
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          sed -i "s|image: .*|image: ${{ github.event.inputs.DockerHubUser }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }}|" ${{ github.event.inputs.APP_NAME }}-service.yaml
          kubectl apply -f ${{ github.event.inputs.APP_NAME }}-service.yaml

      # 10. Delete Kubernetes service
      - name: Delete Kubernetes Service
        if: ${{ github.event.inputs.action == 'delete' }}
        working-directory: kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: kubectl delete -f ${{ github.event.inputs.APP_NAME }}-service.yaml