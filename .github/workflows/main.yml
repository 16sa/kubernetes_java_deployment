name: CI/CD Pipeline for Java App

# This section replaces the Jenkins 'parameters' block
on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: 'Name of the application (e.g., productcatalogue, shopfront, stockmanage)'
        required: true
        type: string
      action:
        description: 'Choose create/delete'
        required: true
        type: choice
        options:
          - create
          - delete
      ImageTag:
        description: 'Tag for the Docker image'
        required: true
        default: 'latest'
        type: string

jobs:
  # This job runs when you choose the 'create' action
  build-and-deploy:
    # This 'if' condition replaces the 'when' block in Jenkins
    if: github.event.inputs.action == 'create'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: '16sa/kubernetes_java_deployment'
          ref: 'main'

      # 2. Set up JDK and Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Maven Build & Integration Test
      - name: Maven Build and Test
        run: mvn -B clean install -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=25
        # The 'working-directory' is equivalent to the 'dir()' block in Jenkins
        working-directory: ${{ github.event.inputs.APP_NAME }}

      # 4. SonarQube Static Code Analysis & Quality Gate
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ github.event.inputs.APP_NAME }}

      # 5. Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ github.event.inputs.APP_NAME }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }}

      # 7. Scan Docker Image with Trivy
      - name: Scan Docker image for vulnerabilities
        run: |
          set +e   # disable 'exit on error' for this step
          docker run --rm aquasec/trivy:latest image \
            --exit-code 0 \
            --ignore-unfixed \
            --vuln-type os,library \
            --severity CRITICAL,HIGH \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }}
            set -e   # re-enable 'exit on error'

      # 8. Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          echo "Starting deployment of microservice: ${{ github.event.inputs.APP_NAME }}"
          # This replaces the 'sed' command to update the image tag
          sed -i 's|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.APP_NAME }}:${{ github.event.inputs.ImageTag }}|' kubernetes/${{ github.event.inputs.APP_NAME }}-service.yaml
          
          # Setup kubectl using the KUBE_CONFIG secret
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          kubectl apply -f kubernetes/${{ github.event.inputs.APP_NAME }}-service.yaml

  # This job runs when you choose the 'delete' action
  destroy:
    if: github.event.inputs.action == 'delete'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: '16sa/kubernetes_java_deployment'
          ref: 'main'
          
      - name: Delete from Kubernetes
        run: |
          echo "Starting deletion of microservice: ${{ github.event.inputs.APP_NAME }}"
          
          # Setup kubectl using the KUBE_CONFIG secret
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          kubectl delete -f kubernetes/${{ github.event.inputs.APP_NAME }}-service.yaml --ignore-not-found=true
